name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    name: PR Validation
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_USER: postgres
          POSTGRES_DB: StudentAutomationDB_Test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: |
        dotnet restore StudentAutomation.Backend/StudentAutomation.Backend.csproj
        dotnet restore StudentAutomation.Frontend/StudentAutomation.Frontend.csproj

    - name: Check code formatting
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic StudentAutomation.Backend/StudentAutomation.Backend.csproj
        dotnet format --verify-no-changes --verbosity diagnostic StudentAutomation.Frontend/StudentAutomation.Frontend.csproj

    - name: Build Backend
      run: dotnet build StudentAutomation.Backend/StudentAutomation.Backend.csproj --no-restore --configuration Release

    - name: Build Frontend
      run: dotnet build StudentAutomation.Frontend/StudentAutomation.Frontend.csproj --no-restore --configuration Release

    - name: Run tests with coverage
      run: |
        dotnet test StudentAutomation.Backend/StudentAutomation.Backend.csproj \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --logger trx \
          --results-directory TestResults/ \
          --collect:"XPlat Code Coverage"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=StudentAutomationDB_Test;Username=postgres;Password=postgres123"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-test-results
        path: TestResults/

    - name: Code quality check
      run: |
        echo "Running code quality checks..."
        # Burada SonarQube, CodeQL veya başka code quality araçları eklenebilir

    - name: Check for breaking changes
      run: |
        echo "Checking for breaking changes..."
        # API breaking change detection eklenebilir

    - name: Validate Docker builds
      run: |
        echo "Validating Docker builds..."
        docker build -t test-backend ./StudentAutomation.Backend
        docker build -t test-frontend ./StudentAutomation.Frontend
        echo "Docker builds successful"

    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
          );
          
          const body = `## PR Validation Results 🔍
          
          ✅ **Build Status**: Successful
          ✅ **Tests**: All tests passed
          ✅ **Code Formatting**: Compliant
          ✅ **Docker Builds**: Successful
          
          This PR is ready for review! 🚀`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
