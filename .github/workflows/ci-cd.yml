name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_USER: postgres
          POSTGRES_DB: StudentAutomationDB_Test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: |
        dotnet restore StudentAutomation.Backend/StudentAutomation.Backend.csproj
        dotnet restore StudentAutomation.Frontend/StudentAutomation.Frontend.csproj

    - name: Build Backend
      run: dotnet build StudentAutomation.Backend/StudentAutomation.Backend.csproj --no-restore --configuration Release

    - name: Build Frontend
      run: dotnet build StudentAutomation.Frontend/StudentAutomation.Frontend.csproj --no-restore --configuration Release

    - name: Run Backend Tests
      run: dotnet test StudentAutomation.Backend/StudentAutomation.Backend.csproj --no-build --configuration Release --verbosity normal --logger trx --results-directory TestResults/
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=StudentAutomationDB_Test;Username=postgres;Password=postgres123"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Code Quality Analysis
      run: |
        # Format code first, then verify
        dotnet format StudentAutomation.Backend/StudentAutomation.Backend.csproj
        dotnet format StudentAutomation.Frontend/StudentAutomation.Frontend.csproj
        # Check if any changes were made
        if ! git diff --exit-code; then
          echo "Code formatting changes detected. Please run 'dotnet format' locally and commit the changes."
          exit 1
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Install security scan tool
      run: dotnet tool install --global security-scan

    - name: Run security scan
      run: |
        security-scan StudentAutomation.Backend/StudentAutomation.Backend.csproj --excl-proj=**/*Test*.csproj
        security-scan StudentAutomation.Frontend/StudentAutomation.Frontend.csproj --excl-proj=**/*Test*.csproj
      continue-on-error: true

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for Backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./StudentAutomation.Backend
        file: ./StudentAutomation.Backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./StudentAutomation.Frontend
        file: ./StudentAutomation.Frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging Environment
      run: |
        echo "Deploying to staging environment..."
        # Bu kƒ±sƒ±m staging ortamƒ±nƒ±za g√∂re √∂zelle≈ütirilmelidir
        # √ñrnek: kubectl, docker-compose, cloud provider CLI komutlarƒ±
        echo "Staging deployment completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production Environment
      run: |
        echo "Deploying to production environment..."
        # Bu kƒ±sƒ±m production ortamƒ±nƒ±za g√∂re √∂zelle≈ütirilmelidir
        # √ñrnek: kubectl, docker-compose, cloud provider CLI komutlarƒ±
        echo "Production deployment completed"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success' }}
      run: |
        echo "Deployment successful! üéâ"
        # Slack, Teams, email bildirimi eklenebilir

    - name: Notify Failure
      if: ${{ needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure' }}
      run: |
        echo "Deployment failed! ‚ùå"
        # Hata bildirimi eklenebilir
