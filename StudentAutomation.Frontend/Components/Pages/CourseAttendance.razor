@page "/course/{courseId:int}/attendance"
@using StudentAutomation.Frontend.Models
@using StudentAutomation.Frontend.Services
@inject IApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container-fluid py-4">
    @if (course != null)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h2 class="card-title mb-1">@course.CourseName</h2>
                                <p class="text-muted mb-0">@course.CourseCode - Attendance Management</p>
                            </div>
                            <button class="btn btn-outline-secondary" @onclick="GoBack">
                                <i class="fas fa-arrow-left me-2"></i>Back to Course
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Select Date</h5>
                        <input type="date" class="form-control" @bind="selectedDate" @bind:event="oninput" @onchange="LoadAttendanceForDate" />
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Quick Actions</h5>
                        <div class="btn-group" role="group">
                            <button class="btn btn-success btn-sm" @onclick="MarkAllPresent" disabled="@isLoading">
                                <i class="fas fa-check-circle me-1"></i>All Present
                            </button>
                            <button class="btn btn-warning btn-sm" @onclick="MarkAllAbsent" disabled="@isLoading">
                                <i class="fas fa-times-circle me-1"></i>All Absent
                            </button>
                            <button class="btn btn-primary btn-sm" @onclick="SaveAttendance" disabled="@isLoading">
                                <i class="fas fa-save me-1"></i>Save Changes
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (students.Any())
        {
            <div class="row">
                <div class="col-12">
                    <div class="card border-0 shadow-sm">
                        <div class="card-header bg-white">
                            <h5 class="mb-0">
                                Student Attendance - @selectedDate.ToString("MMMM dd, yyyy")
                                <span class="badge bg-info ms-2">@students.Count Students</span>
                            </h5>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Student</th>
                                            <th>Student Number</th>
                                            <th>Status</th>
                                            <th>Notes</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var student in students)
                                        {
                                            var attendanceRecord = attendanceRecords.FirstOrDefault(a => a.StudentId == student.Id);
                                            var status = attendanceRecord?.Status ?? AttendanceStatus.Present;
                                            var notes = attendanceRecord?.Notes ?? "";

                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <div class="avatar-circle me-3">
                                                            @student.FirstName.Substring(0, 1).ToUpper()@student.LastName.Substring(0, 1).ToUpper()
                                                        </div>
                                                        <div>
                                                            <div class="fw-medium">@student.FirstName @student.LastName</div>
                                                            <small class="text-muted">@student.Email</small>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-light text-dark">@student.StudentNumber</span>
                                                </td>
                                                <td>
                                                    <select class="form-select form-select-sm" @onchange="@(e => UpdateStudentStatus(student.Id, (AttendanceStatus)Enum.Parse(typeof(AttendanceStatus), e.Value?.ToString() ?? "Present")))" style="width: auto;">
                                                        <option value="@AttendanceStatus.Present" selected="@(status == AttendanceStatus.Present)">Present</option>
                                                        <option value="@AttendanceStatus.Absent" selected="@(status == AttendanceStatus.Absent)">Absent</option>
                                                        <option value="@AttendanceStatus.Late" selected="@(status == AttendanceStatus.Late)">Late</option>
                                                        <option value="@AttendanceStatus.Excused" selected="@(status == AttendanceStatus.Excused)">Excused</option>
                                                    </select>
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm" 
                                                           placeholder="Add notes..." 
                                                           value="@notes"
                                                           @onchange="@(e => UpdateStudentNotes(student.Id, e.Value?.ToString() ?? ""))" />
                                                </td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(status)">
                                                        @GetStatusIcon(status) @status.ToString()
                                                    </span>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (!isLoading)
        {
            <div class="row">
                <div class="col-12">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body text-center py-5">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No Students Enrolled</h5>
                            <p class="text-muted">There are no students enrolled in this course yet.</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading attendance data...</p>
        </div>
    }

    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle me-2"></i>@successMessage
                <button type="button" class="btn-close" @onclick="ClearMessages"></button>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>@errorMessage
                <button type="button" class="btn-close" @onclick="ClearMessages"></button>
            </div>
        </div>
    }
</div>

<style>
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 14px;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
        font-size: 0.875rem;
    }

    .table td {
        vertical-align: middle;
        border-color: #f1f3f4;
    }

    .form-select-sm, .form-control-sm {
        font-size: 0.875rem;
    }

    .btn-group .btn {
        border-radius: 0.375rem;
        margin-right: 0.25rem;
    }

    .card {
        border-radius: 0.75rem;
    }

    .alert {
        border-radius: 0.75rem;
        border: none;
    }
</style>

@code {
    [Parameter] public int CourseId { get; set; }

    private CourseDto? course;
    private List<CourseStudentDto> students = new();
    private List<AttendanceDto> attendanceRecords = new();
    private Dictionary<int, AttendanceStatus> studentStatusChanges = new();
    private Dictionary<int, string> studentNotesChanges = new();
    
    private DateTime selectedDate = DateTime.Today;
    private bool isLoading = true;
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"DEBUG: CourseAttendance page initialized for course {CourseId}");
        await LoadCourseData();
        await LoadStudents();
        await LoadAttendanceForDate();
        isLoading = false;
    }

    private async Task LoadCourseData()
    {
        try
        {
            course = await ApiService.GetCourseByIdAsync(CourseId);
            Console.WriteLine($"DEBUG: Loaded course: {course?.CourseName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Error loading course: {ex.Message}");
            errorMessage = "Failed to load course information.";
        }
    }

    private async Task LoadStudents()
    {
        try
        {
            students = await ApiService.GetCourseStudentsAsync(CourseId);
            Console.WriteLine($"DEBUG: Loaded {students.Count} students");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Error loading students: {ex.Message}");
            errorMessage = "Failed to load students.";
        }
    }

    private async Task LoadAttendanceForDate()
    {
        try
        {
            isLoading = true;
            attendanceRecords = await ApiService.GetAttendanceByCourseAsync(CourseId);
            
            // Filter by selected date
            attendanceRecords = attendanceRecords
                .Where(a => a.Date.Date == selectedDate.Date)
                .ToList();
                
            Console.WriteLine($"DEBUG: Loaded {attendanceRecords.Count} attendance records for {selectedDate:yyyy-MM-dd}");
            
            // Clear any pending changes when loading new date
            studentStatusChanges.Clear();
            studentNotesChanges.Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Error loading attendance: {ex.Message}");
            errorMessage = "Failed to load attendance records.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdateStudentStatus(int studentId, AttendanceStatus status)
    {
        studentStatusChanges[studentId] = status;
        Console.WriteLine($"DEBUG: Updated status for student {studentId} to {status}");
    }

    private void UpdateStudentNotes(int studentId, string notes)
    {
        studentNotesChanges[studentId] = notes;
        Console.WriteLine($"DEBUG: Updated notes for student {studentId}");
    }

    private void MarkAllPresent()
    {
        foreach (var student in students)
        {
            studentStatusChanges[student.Id] = AttendanceStatus.Present;
        }
        StateHasChanged();
    }

    private void MarkAllAbsent()
    {
        foreach (var student in students)
        {
            studentStatusChanges[student.Id] = AttendanceStatus.Absent;
        }
        StateHasChanged();
    }

    private async Task SaveAttendance()
    {
        try
        {
            isLoading = true;
            ClearMessages();

            var bulkAttendanceDto = new BulkAttendanceDto
            {
                CourseId = CourseId,
                Date = selectedDate,
                StudentAttendances = new List<StudentAttendanceDto>()
            };

            foreach (var student in students)
            {
                var status = studentStatusChanges.ContainsKey(student.Id) 
                    ? studentStatusChanges[student.Id] 
                    : attendanceRecords.FirstOrDefault(a => a.StudentId == student.Id)?.Status ?? AttendanceStatus.Present;

                var notes = studentNotesChanges.ContainsKey(student.Id) 
                    ? studentNotesChanges[student.Id] 
                    : attendanceRecords.FirstOrDefault(a => a.StudentId == student.Id)?.Notes ?? "";

                bulkAttendanceDto.StudentAttendances.Add(new StudentAttendanceDto
                {
                    StudentId = student.Id,
                    Status = status,
                    Notes = notes
                });
            }

            Console.WriteLine($"DEBUG: Saving bulk attendance for {bulkAttendanceDto.StudentAttendances.Count} students");
            Console.WriteLine($"DEBUG: CourseId: {bulkAttendanceDto.CourseId}, Date: {bulkAttendanceDto.Date}");
            
            var result = await ApiService.CreateBulkAttendanceAsync(bulkAttendanceDto);
            Console.WriteLine($"DEBUG: API result count: {result?.Count ?? 0}");

            if (result != null && result.Any())
            {
                successMessage = $"Attendance saved successfully for {result.Count} students!";
                await LoadAttendanceForDate(); // Reload to get updated data
                studentStatusChanges.Clear();
                studentNotesChanges.Clear();
                
                // Auto-hide success message after 3 seconds
                _ = Task.Delay(3000).ContinueWith(_ => 
                {
                    successMessage = "";
                    InvokeAsync(StateHasChanged);
                });
            }
            else
            {
                Console.WriteLine("DEBUG: API returned null or empty result");
                errorMessage = "Failed to save attendance. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Error saving attendance: {ex.Message}");
            errorMessage = "An error occurred while saving attendance.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetStatusBadgeClass(AttendanceStatus status)
    {
        return status switch
        {
            AttendanceStatus.Present => "bg-success",
            AttendanceStatus.Absent => "bg-danger",
            AttendanceStatus.Late => "bg-warning text-dark",
            AttendanceStatus.Excused => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetStatusIcon(AttendanceStatus status)
    {
        return status switch
        {
            AttendanceStatus.Present => "fas fa-check",
            AttendanceStatus.Absent => "fas fa-times",
            AttendanceStatus.Late => "fas fa-clock",
            AttendanceStatus.Excused => "fas fa-user-check",
            _ => "fas fa-question"
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/course/{CourseId}/students");
    }

    private void ClearMessages()
    {
        successMessage = "";
        errorMessage = "";
        StateHasChanged();
    }
}
