@page "/my-courses"
@using StudentAutomation.Frontend.Models
@using StudentAutomation.Frontend.Services
@inject IApiService ApiService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>My Courses</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-book-open me-2"></i>My Courses</h2>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                </div>
            }

            @if (!isInitialized)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (enrolledCourses.Count == 0)
            {
                <div class="alert alert-info text-center">
                    <i class="fas fa-info-circle me-2"></i>
                    You are not enrolled in any courses yet.
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var enrollment in enrolledCourses)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header bg-primary text-white">
                                    <h5 class="card-title mb-0">
                                        <i class="fas fa-graduation-cap me-2"></i>@(enrollment.Course?.CourseName ?? enrollment.CourseName)
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">
                                        <strong>Course Code:</strong> @(enrollment.Course?.CourseCode ?? enrollment.CourseCode)<br>
                                        <strong>Credits:</strong> @(enrollment.Course?.Credits ?? 0)<br>
                                        <strong>Teacher:</strong> @(enrollment.Course?.TeacherName ?? "N/A")<br>
                                        <strong>Status:</strong> 
                                        <span class="badge @GetStatusBadgeClass(enrollment.Course?.Status ?? CourseStatus.Active)">
                                            @(enrollment.Course?.Status ?? CourseStatus.Active)
                                        </span>
                                    </p>
                                    @if (!string.IsNullOrEmpty(enrollment.Course?.Description))
                                    {
                                        <p class="card-text">
                                            <small class="text-muted">@enrollment.Course.Description</small>
                                        </p>
                                    }
                                    <p class="card-text">
                                        <small class="text-muted">
                                            Enrolled: @enrollment.EnrollmentDate.ToString("MMM dd, yyyy")
                                        </small>
                                    </p>
                                </div>
                                <div class="card-footer bg-light">
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => ViewGrades(enrollment.CourseId)">
                                            <i class="fas fa-chart-line me-1"></i>View Grades
                                        </button>
                                        <button class="btn btn-outline-info btn-sm" @onclick="() => ViewAttendance(enrollment.CourseId)">
                                            <i class="fas fa-calendar-check me-1"></i>Attendance
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<CourseEnrollmentDto> enrolledCourses = new();
    private bool isInitialized = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("DEBUG MyCourses: OnInitializedAsync called");
        try
        {
            Console.WriteLine("DEBUG MyCourses: Starting initialization");
            await LoadMyCourses();
            Console.WriteLine("DEBUG MyCourses: Courses loaded successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG MyCourses: Error loading courses: {ex.Message}");
            Console.WriteLine($"DEBUG MyCourses: Error stack trace: {ex.StackTrace}");
            errorMessage = $"Error loading courses: {ex.Message}";
        }
        finally
        {
            isInitialized = true;
        }
    }

    private async Task LoadMyCourses()
    {
        try
        {
            Console.WriteLine("DEBUG MyCourses: LoadMyCourses called");
            enrolledCourses = await ApiService.GetMyCoursesAsync();
            Console.WriteLine($"DEBUG MyCourses: LoadMyCourses completed with {enrolledCourses.Count} courses");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG MyCourses: LoadMyCourses exception: {ex.Message}");
            errorMessage = $"Error loading courses: {ex.Message}";
        }
    }

    private string GetStatusBadgeClass(CourseStatus status)
    {
        return status switch
        {
            CourseStatus.Active => "bg-success",
            CourseStatus.Completed => "bg-primary",
            CourseStatus.Inactive => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private void ViewGrades(int courseId)
    {
        Navigation.NavigateTo($"/my-grades/{courseId}");
    }

    private void ViewAttendance(int courseId)
    {
        Navigation.NavigateTo($"/my-attendance/{courseId}");
    }
}
