@page "/teachers"
@using StudentAutomation.Frontend.Models
@using StudentAutomation.Frontend.Services
@inject IAuthService AuthService
@inject IApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Teachers - Student Automation System</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <h1 class="h3 mb-0">Teachers Management</h1>
            <p class="text-muted">Manage all teachers in the system</p>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ShowAddTeacherModal">
                <i class="fas fa-plus me-2"></i>Add New Teacher
            </button>
        </div>
    </div>

    @if (!isInitialized)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                @if (teachers.Any())
                {
                    <div class="card">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Email</th>
                                            <th>Phone</th>
                                            <th>Department</th>
                                            <th>Hire Date</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var teacher in teachers)
                                        {
                                            <tr>
                                                <td>@teacher.FirstName @teacher.LastName</td>
                                                <td>@teacher.Email</td>
                                                <td>@teacher.PhoneNumber</td>
                                                <td>@teacher.Department</td>
                                                <td>@teacher.HireDate.ToString("MM/dd/yyyy")</td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewTeacher(teacher.Id)">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditTeacher(teacher.Id)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTeacher(teacher.Id)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-chalkboard-teacher fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No teachers found</h5>
                        <p class="text-muted">Add teachers to get started.</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

<!-- Add Teacher Modal -->
@if (showAddModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Teacher</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newTeacher" OnValidSubmit="HandleAddTeacher">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">First Name</label>
                            <InputText @bind-Value="newTeacher.FirstName" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Last Name</label>
                            <InputText @bind-Value="newTeacher.LastName" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="newTeacher.Email" class="form-control" type="email" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <InputText @bind-Value="newTeacher.PhoneNumber" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label for="employeeNumber" class="form-label">Employee Number</label>
                            <InputText id="employeeNumber" @bind-Value="newTeacher.EmployeeNumber" class="form-control" placeholder="Enter employee number" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" @bind-Value="newTeacher.Password" class="form-control" type="password" placeholder="Enter password (min 6 characters)" required minlength="6" />
                            <div class="form-text">Minimum 6 characters required</div>
                        </div>

                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <InputTextArea id="address" @bind-Value="newTeacher.Address" class="form-control" rows="3" placeholder="Enter address" />
                        </div>

                        <div class="mb-3">
                            <label for="dateOfBirth" class="form-label">Date of Birth</label>
                            <InputDate id="dateOfBirth" @bind-Value="newTeacher.DateOfBirth" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label for="department" class="form-label">Department</label>
                            <InputText id="department" @bind-Value="newTeacher.Department" class="form-control" placeholder="Enter department" />
                        </div>

                        <div class="mb-3">
                            <label for="title" class="form-label">Title</label>
                            <InputText id="title" @bind-Value="newTeacher.Title" class="form-control" placeholder="Enter title" />
                        </div>

                        <div class="mb-3">
                            <label for="hireDate" class="form-label">Hire Date</label>
                            <InputDate id="hireDate" @bind-Value="newTeacher.HireDate" class="form-control" />
                        </div>


                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Add Teacher
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<TeacherDto> teachers = new();
    private bool isInitialized = false;
    private string errorMessage = string.Empty;
    private bool showAddModal = false;
    private bool isSubmitting = false;
    private CreateTeacherDto newTeacher = new() { HireDate = DateTime.Today, DateOfBirth = DateTime.Today.AddYears(-25), Password = "Teacher123!" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (!await AuthService.IsAuthenticatedAsync())
                {
                    Navigation.NavigateTo("/login");
                    return;
                }

                var currentUser = await AuthService.GetCurrentUserAsync();
                if (currentUser == null || !currentUser.Roles.Contains("Admin"))
                {
                    Navigation.NavigateTo("/");
                    return;
                }

                await LoadTeachers();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error loading page: {ex.Message}";
            }
            finally
            {
                isInitialized = true;
                StateHasChanged();
            }
        }
    }

    private async Task LoadTeachers()
    {
        try
        {
            errorMessage = string.Empty;
            teachers = await ApiService.GetTeachersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading teachers: {ex.Message}";
        }
    }

    private void ShowAddTeacherModal()
    {
        newTeacher = new CreateTeacherDto { HireDate = DateTime.Today, DateOfBirth = DateTime.Today.AddYears(-25), Password = "Teacher123!" };
        showAddModal = true;
    }

    private void CloseAddModal()
    {
        showAddModal = false;
        newTeacher = new CreateTeacherDto { HireDate = DateTime.Today, DateOfBirth = DateTime.Today.AddYears(-25), Password = "Teacher123!" };
    }

    private async Task HandleAddTeacher()
    {
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;

            // Client-side validation
            if (string.IsNullOrEmpty(newTeacher.Password) || newTeacher.Password.Length < 6)
            {
                errorMessage = "Password must be at least 6 characters long.";
                return;
            }

            var result = await ApiService.CreateTeacherAsync(newTeacher);
            
            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Teacher added successfully!");
                showAddModal = false;
                newTeacher = new() { HireDate = DateTime.Today, DateOfBirth = DateTime.Today.AddYears(-25), Password = "Teacher123!" };
                await LoadTeachers();
            }
            else
            {
                errorMessage = "Failed to add teacher. Please check all fields and try again.";
            }
        }
        catch (UnauthorizedAccessException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding teacher: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ViewTeacher(int teacherId)
    {
        Navigation.NavigateTo($"/teachers/{teacherId}");
    }

    private void EditTeacher(int teacherId)
    {
        Navigation.NavigateTo($"/teachers/{teacherId}/edit");
    }

    private async Task DeleteTeacher(int teacherId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this teacher?"))
        {
            try
            {
                // Implementation for delete would go here
                await LoadTeachers();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting teacher: {ex.Message}";
            }
        }
    }
}
