@page "/add-student"
@using StudentAutomation.Frontend.Models
@using StudentAutomation.Frontend.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Add Student - Student Automation System</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <h2 class="fw-bold text-primary">Add New Student</h2>
                        <p class="text-muted">Create a new student account</p>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                        </div>
                    }

                    <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="firstName" class="form-label">First Name</label>
                                    <InputText id="firstName" @bind-Value="registerModel.FirstName" class="form-control" placeholder="Enter first name" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="lastName" class="form-label">Last Name</label>
                                    <InputText id="lastName" @bind-Value="registerModel.LastName" class="form-control" placeholder="Enter last name" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" type="email" placeholder="Enter email address" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="password" class="form-label">Password</label>
                                    <InputText id="password" @bind-Value="registerModel.Password" class="form-control" type="password" placeholder="Enter password" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                                    <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" placeholder="Confirm password" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="phoneNumber" class="form-label">Phone Number</label>
                            <InputText id="phoneNumber" @bind-Value="registerModel.PhoneNumber" class="form-control" placeholder="Enter phone number" />
                        </div>

                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <InputTextArea id="address" @bind-Value="registerModel.Address" class="form-control" rows="3" placeholder="Enter address" />
                        </div>

                        <div class="mb-3">
                            <label for="dateOfBirth" class="form-label">Date of Birth</label>
                            <InputDate id="dateOfBirth" @bind-Value="registerModel.DateOfBirth" class="form-control" />
                        </div>

                        <!-- Student-specific fields -->
                        <div class="mb-3">
                            <label for="studentNumber" class="form-label">Student Number</label>
                            <InputText id="studentNumber" @bind-Value="registerModel.StudentNumber" class="form-control" placeholder="Enter student number" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="department" class="form-label">Department/Major</label>
                                    <InputText id="department" @bind-Value="registerModel.Department" class="form-control" placeholder="Enter department or major" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="year" class="form-label">Academic Year</label>
                                    <InputSelect id="year" @bind-Value="registerModel.Year" class="form-select">
                                        <option value="">Select Year</option>
                                        <option value="1">1st Year</option>
                                        <option value="2">2nd Year</option>
                                        <option value="3">3rd Year</option>
                                        <option value="4">4th Year</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <text>Creating Student</text>
                                }
                                else
                                {
                                    <i class="fas fa-user-plus me-2"></i>
                                    <text>Create Student Account</text>
                                }
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="GoBack">
                                <i class="fas fa-arrow-left me-2"></i>Back to Students
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterDto registerModel = new() 
    { 
        DateOfBirth = DateTime.Today.AddYears(-18),
        Role = "Student"
    };
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (!await AuthService.IsAuthenticatedAsync())
                {
                    Navigation.NavigateTo("/login");
                    return;
                }

                var currentUser = await AuthService.GetCurrentUserAsync();
                if (currentUser == null || (!currentUser.Roles.Contains("Admin") && !currentUser.Roles.Contains("Teacher")))
                {
                    Navigation.NavigateTo("/");
                    return;
                }
            }
            catch
            {
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Ensure role is set to Student
            registerModel.Role = "Student";

            var result = await AuthService.RegisterAsync(registerModel);

            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Student created successfully!");
                Navigation.NavigateTo("/students");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/students");
    }
}
