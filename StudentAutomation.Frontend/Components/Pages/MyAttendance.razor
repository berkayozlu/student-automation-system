@page "/my-attendance"
@page "/my-attendance/{courseId:int}"
@using StudentAutomation.Frontend.Models
@using StudentAutomation.Frontend.Services
@inject IApiService ApiService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>My Attendance</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="mb-0">
                        <i class="fas fa-calendar-check text-primary me-2"></i>
                        @pageTitle
                    </h2>
                    <p class="text-muted mb-0">@GetPageDescription()</p>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading attendance records...</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                </div>
            }
            else if (!attendanceRecords.Any())
            {
                <div class="text-center py-5">
                    <i class="fas fa-calendar-times text-muted" style="font-size: 4rem;"></i>
                    <h4 class="mt-3 text-muted">No Attendance Records</h4>
                    <p class="text-muted">You don't have any attendance records yet.</p>
                </div>
            }
            else
            {
                <!-- Summary Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 class="mb-0">@presentCount</h4>
                                        <p class="mb-0">Present</p>
                                    </div>
                                    <i class="fas fa-check-circle fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-danger text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 class="mb-0">@absentCount</h4>
                                        <p class="mb-0">Absent</p>
                                    </div>
                                    <i class="fas fa-times-circle fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-dark">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 class="mb-0">@lateCount</h4>
                                        <p class="mb-0">Late</p>
                                    </div>
                                    <i class="fas fa-clock fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 class="mb-0">@excusedCount</h4>
                                        <p class="mb-0">Excused</p>
                                    </div>
                                    <i class="fas fa-user-check fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Attendance Records Table -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-list me-2"></i>
                            Attendance Records (@attendanceRecords.Count total)
                        </h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date</th>
                                        <th>Course</th>
                                        <th>Teacher</th>
                                        <th>Status</th>
                                        <th>Notes</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var attendance in attendanceRecords)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@attendance.Date.ToString("MMM dd, yyyy")</strong>
                                                <br>
                                                <small class="text-muted">@attendance.Date.ToString("dddd")</small>
                                            </td>
                                            <td>
                                                <div>
                                                    <strong>@attendance.CourseName</strong>
                                                    <br>
                                                    <small class="text-muted">@attendance.CourseCode</small>
                                                </div>
                                            </td>
                                            <td>@attendance.TeacherName</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(attendance.Status)">
                                                    <i class="@GetStatusIcon(attendance.Status) me-1"></i>
                                                    @attendance.Status.ToString()
                                                </span>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(attendance.Notes))
                                                {
                                                    <span class="text-muted">@attendance.Notes</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted fst-italic">No notes</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Attendance Rate -->
                @if (attendanceRecords.Any())
                {
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title">
                                <i class="fas fa-chart-pie me-2"></i>
                                Attendance Rate
                            </h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="progress mb-3" style="height: 25px;">
                                        <div class="progress-bar bg-success" role="progressbar" 
                                             style="width: @(attendanceRate)%" 
                                             aria-valuenow="@attendanceRate" aria-valuemin="0" aria-valuemax="100">
                                            @attendanceRate.ToString("F1")%
                                        </div>
                                    </div>
                                    <p class="text-muted mb-0">
                                        Overall attendance rate based on Present and Excused records
                                    </p>
                                </div>
                                <div class="col-md-6">
                                    <div class="row text-center">
                                        <div class="col-6">
                                            <h4 class="text-success mb-0">@(presentCount + excusedCount)</h4>
                                            <small class="text-muted">Attended</small>
                                        </div>
                                        <div class="col-6">
                                            <h4 class="text-danger mb-0">@(absentCount + lateCount)</h4>
                                            <small class="text-muted">Missed/Late</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int? CourseId { get; set; }
    
    private List<AttendanceDto> attendanceRecords = new();
    private bool isLoading = true;
    private string errorMessage = "";
    private string pageTitle = "My Attendance";

    private int presentCount = 0;
    private int absentCount = 0;
    private int lateCount = 0;
    private int excusedCount = 0;
    private double attendanceRate = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("DEBUG: MyAttendance - Loading attendance records");
            
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            var userRole = await AuthService.GetUserRoleAsync();
            if (userRole != "Student")
            {
                Navigation.NavigateTo("/");
                return;
            }

            await LoadAttendanceRecords();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: MyAttendance initialization error: {ex.Message}");
            errorMessage = "An error occurred while loading the page.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAttendanceRecords()
    {
        try
        {
            Console.WriteLine($"DEBUG: Loading attendance records from API (CourseId: {CourseId})");
            attendanceRecords = await ApiService.GetMyAttendanceAsync();
            
            // Filter by course if CourseId is specified
            if (CourseId.HasValue)
            {
                attendanceRecords = attendanceRecords.Where(a => a.CourseId == CourseId.Value).ToList();
                
                // Update page title for specific course
                if (attendanceRecords.Any())
                {
                    var courseName = attendanceRecords.First().CourseName;
                    pageTitle = $"Attendance - {courseName}";
                }
                else
                {
                    pageTitle = "Course Attendance";
                }
            }
            
            Console.WriteLine($"DEBUG: Loaded {attendanceRecords.Count} attendance records");
            
            // Calculate statistics
            presentCount = attendanceRecords.Count(a => a.Status == AttendanceStatus.Present);
            absentCount = attendanceRecords.Count(a => a.Status == AttendanceStatus.Absent);
            lateCount = attendanceRecords.Count(a => a.Status == AttendanceStatus.Late);
            excusedCount = attendanceRecords.Count(a => a.Status == AttendanceStatus.Excused);

            // Calculate attendance rate (Present + Excused / Total)
            var totalRecords = attendanceRecords.Count;
            if (totalRecords > 0)
            {
                attendanceRate = ((double)(presentCount + excusedCount) / totalRecords) * 100;
            }

            Console.WriteLine($"DEBUG: Statistics - Present: {presentCount}, Absent: {absentCount}, Late: {lateCount}, Excused: {excusedCount}, Rate: {attendanceRate:F1}%");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Error loading attendance records: {ex.Message}");
            errorMessage = "Failed to load attendance records. Please try again.";
        }
    }

    private string GetPageDescription()
    {
        if (CourseId.HasValue)
        {
            return "View your attendance records for this course";
        }
        return "View your attendance records across all courses";
    }

    private string GetStatusBadgeClass(AttendanceStatus status)
    {
        return status switch
        {
            AttendanceStatus.Present => "bg-success",
            AttendanceStatus.Absent => "bg-danger",
            AttendanceStatus.Late => "bg-warning text-dark",
            AttendanceStatus.Excused => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetStatusIcon(AttendanceStatus status)
    {
        return status switch
        {
            AttendanceStatus.Present => "fas fa-check",
            AttendanceStatus.Absent => "fas fa-times",
            AttendanceStatus.Late => "fas fa-clock",
            AttendanceStatus.Excused => "fas fa-user-check",
            _ => "fas fa-question"
        };
    }
}
